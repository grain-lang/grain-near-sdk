/* grainc-flags --no-gc */
// Workaround until int256 (fixnum) support is added to Grain

import Int32 from "int32"
import Int64 from "int64"
import Number from "number"
import Bytes from "bytes"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Conv from "runtime/unsafe/conv"
import Tags from "runtime/unsafe/tags"
import Memory from "runtime/unsafe/memory"

type Int256 = Bytes

export let allocate = () => {
  let ret = Bytes.make(32)
  Bytes.fill(0l, ret)
  ret: Int256
}

export let toBytes: Int256 -> Bytes = identity
export let fromBytes: Bytes -> Int256 = identity

export let fromInt64: Int64 -> Int256 = n => {
  let ret = allocate()
  Bytes.setInt64(0, n, ret)
  ret
}

export let toNumber = (n: Int256) => {
  let limb0 = Bytes.getInt64(0, n)
  let limb1 = Bytes.getInt64(8, n)
  let limb2 = Bytes.getInt64(16, n)
  let limb3 = Bytes.getInt64(24, n)
  let limbs = if (limb3 != 0L) 4 else if (limb2 != 0L) 3 else if (limb1 != 0L)
      2 else if (limb0 != 0L) 1 else 0
  if (limbs == 0) {
    0
  } else {
    let len = Conv.fromInt32(Int32.fromNumber(limbs * 8 + 16))
    let ptr = Memory.malloc(len)
    Memory.fill(ptr, 0n, len)
    WasmI32.store(ptr, Tags._GRAIN_BOXED_NUM_HEAP_TAG, 0n)
    WasmI32.store(ptr, Tags._GRAIN_BIGINT_BOXED_NUM_TAG, 4n)
    WasmI32.store(ptr, Conv.fromInt32(Int32.fromNumber(limbs)), 8n)
    WasmI32.store(ptr, 0n, 12n)
    if (limb0 != 0L) {
      WasmI64.store(ptr, Conv.fromInt64(limb0), 16n)
    }
    if (limb1 != 0L) {
      WasmI64.store(ptr, Conv.fromInt64(limb1), 24n)
    }
    if (limb2 != 0L) {
      WasmI64.store(ptr, Conv.fromInt64(limb2), 32n)
    }
    if (limb3 != 0L) {
      WasmI64.store(ptr, Conv.fromInt64(limb3), 40n)
    }
    WasmI32.toGrain(ptr)
  }
}

export let fromNumber = n => {
  if (Number.abs(n) <= 0x7FFFFFFFFFFFFFFF) {
    fromInt64(Int64.fromNumber(n))
  } else {
    // bigint
    assert Conv.toInt32(WasmI32.load(WasmI32.fromGrain(n), 0n)) ==
    Conv.toInt32(Tags._GRAIN_BOXED_NUM_HEAP_TAG)
    assert Conv.toInt32(WasmI32.load(WasmI32.fromGrain(n), 4n)) ==
    Conv.toInt32(Tags._GRAIN_BIGINT_BOXED_NUM_TAG)
    let nLimbs = Int32.toNumber(
      Conv.toInt32(WasmI32.load(WasmI32.fromGrain(n), 8n))
    )
    if (nLimbs > 4) {
      fail "Int256 overflow"
    }
    let limb0 = Conv.toInt64(WasmI64.load(WasmI32.fromGrain(n), 16n))
    let limb1 = Conv.toInt64(WasmI64.load(WasmI32.fromGrain(n), 24n))
    let limb2 = if (nLimbs < 3) 0L
      else Conv.toInt64(WasmI64.load(WasmI32.fromGrain(n), 32n))
    let limb3 = if (nLimbs < 4) 0L
      else Conv.toInt64(WasmI64.load(WasmI32.fromGrain(n), 40n))
    let ret = allocate()
    Bytes.setInt64(0, limb0, ret)
    Bytes.setInt64(8, limb1, ret)
    Bytes.setInt64(16, limb2, ret)
    Bytes.setInt64(24, limb3, ret)
    ret: Int256
  }
}

export let lt = (a: Int256, b: Int256) => {
  let aBytes = a
  let bBytes = b
  let mut res = false
  for (let mut i = 3; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    if (Int64.ltU(aPiece, bPiece)) {
      res = true
      break
    }
  }
  res
}

export let lte = (a: Int256, b: Int256) => {
  a == b || lt(a, b)
}

export let gt = (a: Int256, b: Int256) => {
  let aBytes = a
  let bBytes = b
  let mut res = false
  for (let mut i = 3; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    if (Int64.gtU(aPiece, bPiece)) {
      res = true
      break
    }
  }
  res
}

export let gte = (a: Int256, b: Int256) => {
  a == b || gt(a, b)
}

export let add = (a: Int256, b: Int256) => {
  let aBytes = a
  let bBytes = b
  let retBytes = Bytes.make(32)
  let mut res = false
  let mut carry = 0L
  for (let mut i = 3; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    let retPiece = Int64.add(Int64.add(aPiece, bPiece), carry)
    if (Int64.ltU(retPiece, aPiece)) {
      carry = 1L
    } else {
      carry = 0L
    }
    Bytes.setInt64(i * 8, retPiece, retBytes)
  }
  retBytes: Int256
}

export let sub = (a: Int256, b: Int256) => {
  let aBytes = a
  let bBytes = b
  let retBytes = Bytes.make(32)
  let mut res = false
  let mut carry = 0L
  for (let mut i = 3; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    let retPiece = Int64.sub(Int64.sub(aPiece, bPiece), carry)
    if (Int64.gtU(retPiece, aPiece)) {
      carry = 1L
    } else {
      carry = 0L
    }
    Bytes.setInt64(i * 8, retPiece, retBytes)
  }
  retBytes: Int256
}
