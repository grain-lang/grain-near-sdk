/* grainc-flags --no-gc */
// Workaround until int128 (fixnum) support is added to Grain
import Int64 from "int64"
import Bytes from "bytes"

type Int128 = Bytes

export let allocate = () => {
  let ret = Bytes.make(16)
  Bytes.fill(0l, ret)
  ret: Int128
}

export let toBytes: Int128 -> Bytes = identity
export let fromBytes: Bytes -> Int128 = identity

export let fromInt64 = n => {
  let ret = allocate()
  Bytes.setInt64(0, n, ret)
  ret: Int128
}

export let lt = (a: Int128, b: Int128) => {
  let aBytes = a
  let bBytes = b
  let mut res = false
  for (let mut i = 1; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    if (Int64.ltU(aPiece, bPiece)) {
      res = true
      break
    }
  }
  res
}

export let lte = (a: Int128, b: Int128) => {
  a == b || lt(a, b)
}

export let gt = (a: Int128, b: Int128) => {
  let aBytes = a
  let bBytes = b
  let mut res = false
  for (let mut i = 1; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    if (Int64.gtU(aPiece, bPiece)) {
      res = true
      break
    }
  }
  res
}

export let gte = (a: Int128, b: Int128) => {
  a == b || gt(a, b)
}

export let add = (a: Int128, b: Int128) => {
  let aBytes = a
  let bBytes = b
  let retBytes = Bytes.make(16)
  let mut res = false
  let mut carry = 0L
  for (let mut i = 1; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    let retPiece = Int64.add(Int64.add(aPiece, bPiece), carry)
    if (Int64.ltU(retPiece, aPiece)) {
      carry = 1L
    } else {
      carry = 0L
    }
    Bytes.setInt64(i * 8, retPiece, retBytes)
  }
  retBytes: Int128
}

export let sub = (a: Int128, b: Int128) => {
  let aBytes = a
  let bBytes = b
  let retBytes = Bytes.make(16)
  let mut res = false
  let mut carry = 0L
  for (let mut i = 1; i >= 0; i -= 1) {
    let aPiece = Bytes.getInt64(i * 8, aBytes)
    let bPiece = Bytes.getInt64(i * 8, bBytes)
    let retPiece = Int64.sub(Int64.sub(aPiece, bPiece), carry)
    if (Int64.gtU(retPiece, aPiece)) {
      carry = 1L
    } else {
      carry = 0L
    }
    Bytes.setInt64(i * 8, retPiece, retBytes)
  }
  retBytes: Int128
}
