/* grainc-flags --no-gc */

import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Native from "./internal/native"
import Int128 from "./internal/int128"
import Int256 from "./internal/int256"
import Register from "./register"

let keyPtr = (s: String) => {
  WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(s), 8n))
}

let keyLen = (s: String) => {
  WasmI64.load32U(WasmI32.fromGrain(s), 4n)
}

/**
 * Checks whether the given key exists in storage.
 *
 * @param key: The key to check for
 * @returns Whether the key exists in storage
 *
 * @example Storage.hasKey(Storage.StringKey("foo"))
 */
export let hasKey = (key: String) => {
  WasmI64.eq(Native.storageHasKey(keyLen(key), keyPtr(key)), 1N)
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a UTF-8 string. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated string data, if it exists
 *
 * @example Storage.getString(Storage.StringKey("foo"))
 */
export let getString = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readString(0L)
  }
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a sequence of bytes. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated data, if it exists
 *
 * @example Storage.getBytes(Storage.StringKey("foo"))
 */
export let getBytes = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readBytes(0L)
  }
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a 32-bit integer. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated int32 data, if it exists
 *
 * @example Storage.getInt32(Storage.StringKey("foo"))
 */
export let getInt32 = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt32(0L)
  }
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a 64-bit integer. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated int64 data, if it exists
 *
 * @example Storage.getInt64(Storage.StringKey("foo"))
 */
export let getInt64 = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt64(0L)
  }
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a 128-bit integer. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated int128 data, if it exists
 *
 * @example Storage.getInt128(Storage.StringKey("foo"))
 */
export let getInt128 = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt128(0L)
  }
}

/**
 * Looks up the given key in storage, returning any associated data
 * interpreted as a 256-bit integer. If the lookup is successful,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to check for
 * @returns The associated int256 data, if it exists
 *
 * @example Storage.getInt256(Storage.StringKey("foo"))
 */
export let getInt256 = (key: String) => {
  let res = Native.storageRead(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt256(0L)
  }
}

let setStringLike = (key, value) => {
  let valueLen = WasmI64.load32U(value, 4n)
  let valuePtr = WasmI64.extendI32U(WasmI32.add(value, 8n))
  Native.storageWrite(keyLen(key), keyPtr(key), valueLen, valuePtr, 0N)
}

/**
 * Associates the given key in storage with the given string.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setString(Storage.StringKey("foo"), "bar")
 */
export let setString = (key: String, value: String) => {
  let value = WasmI32.fromGrain(value)
  setStringLike(key, value)
  void
}

/**
 * Associates the given key in storage with the given byte data.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setBytes(Storage.StringKey("foo"), Bytes.fromString("bar"))
 */
export let setBytes = (key: String, value: Bytes) => {
  let value = WasmI32.fromGrain(value)
  setStringLike(key, value)
  void
}

let setFixnum = (key, value, width) => {
  let valueLen = width
  let valuePtr = WasmI64.extendI32U(WasmI32.add(value, 8n))
  Native.storageWrite(keyLen(key), keyPtr(key), valueLen, valuePtr, 0N)
}

/**
 * Associates the given key in storage with the given 32-bit integer.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setInt32(Storage.StringKey("foo"), 42l)
 */
export let setInt32 = (key: String, value: Int32) => {
  let value = WasmI32.fromGrain(value)
  setFixnum(key, value, 4N)
  void
}

/**
 * Associates the given key in storage with the given 64-bit integer.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setInt64(Storage.StringKey("foo"), 42L)
 */
export let setInt64 = (key: String, value: Int64) => {
  let value = WasmI32.fromGrain(value)
  setFixnum(key, value, 8N)
  void
}

/**
 * Associates the given key in storage with the given 128-bit integer.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setInt128(Storage.StringKey("foo"), Int128.fromInt64(5L))
 */
export let setInt128 = (key: String, value: Int128.Int128) => {
  setBytes(key, Int128.toBytes(value))
}

/**
 * Associates the given key in storage with the given 256-bit integer.
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns `true` if the operation overwrites an existing value, otherwise `false`.
 *
 * @example Storage.setInt256(Storage.StringKey("foo"), Int256.fromInt64(5L))
 */
export let setInt256 = (key: String, value: Int256.Int256) => {
  setBytes(key, Int256.toBytes(value))
}

/**
 * Associates the given key in storage with the given string,
 * returning any existing value (interpreted as a string).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing string data associated with `key`, if any
 *
 * @example Storage.replaceString(Storage.StringKey("foo"), "bar")
 */
export let replaceString = (key: String, value: String) => {
  if (WasmI64.eqz(setStringLike(key, WasmI32.fromGrain(value)))) {
    None
  } else {
    Register.readString(0L)
  }
}

/**
 * Associates the given key in storage with the given byte data,
 * returning any existing value (interpreted as a byte sequence).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing byte data associated with `key`, if any
 *
 * @example Storage.replaceBytes(Storage.StringKey("foo"), Bytes.fromString("bar"))
 */
export let replaceBytes = (key: String, value: Bytes) => {
  if (WasmI64.eqz(setStringLike(key, WasmI32.fromGrain(value)))) {
    None
  } else {
    Register.readBytes(0L)
  }
}

/**
 * Associates the given key in storage with the given 32-bit integer,
 * returning any existing value (interpreted as a 32-bit integer).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing int32 data associated with `key`, if any
 *
 * @example Storage.replaceInt32(Storage.StringKey("foo"), 42l)
 */
export let replaceInt32 = (key: String, value: Int32) => {
  if (WasmI64.eqz(setFixnum(key, WasmI32.fromGrain(value), 4N))) {
    None
  } else {
    Register.readInt32(0L)
  }
}

/**
 * Associates the given key in storage with the given 64-bit integer,
 * returning any existing value (interpreted as a 64-bit integer).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing string data associated with `key`, if any
 *
 * @example Storage.setInt64(Storage.StringKey("foo"), 42L)
 */
export let replaceInt64 = (key: String, value: Int64) => {
  if (WasmI64.eqz(setFixnum(key, WasmI32.fromGrain(value), 8N))) {
    None
  } else {
    Register.readInt64(0L)
  }
}

/**
 * Associates the given key in storage with the given 128-bit integer,
 * returning any existing value (interpreted as a 128-bit integer).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing string data associated with `key`, if any
 *
 * @example Storage.setInt128(Storage.StringKey("foo"), Int128.fromInt64(5L))
 */
export let replaceInt128 = (key: String, value: Int128.Int128) => {
  if (WasmI64.eqz(setStringLike(key, WasmI32.fromGrain(value)))) {
    None
  } else {
    Register.readInt128(0L)
  }
}

/**
 * Associates the given key in storage with the given 256-bit integer,
 * returning any existing value (interpreted as a 256-bit integer).
 * If there is already a value associated with the given key,
 * the contents of register 0 will be overwritten.
 *
 * @param key: The key to store
 * @param value: The value to store
 * @returns The existing string data associated with `key`, if any
 *
 * @example Storage.setInt256(Storage.StringKey("foo"), Int256.fromInt64(5L))
 */
export let replaceInt256 = (key: String, value: Int256.Int256) => {
  if (WasmI64.eqz(setStringLike(key, WasmI32.fromGrain(value)))) {
    None
  } else {
    Register.readInt256(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a string.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The string value which was removed from storage
 *
 * @example Storage.popString(Storage.StringKey("foo"))
 */
export let popString = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readString(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a byte sequence.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The bytes value which was removed from storage
 *
 * @example Storage.popBytes(Storage.StringKey("foo"))
 */
export let popBytes = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readBytes(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a 32-bit integer.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The int32 value which was removed from storage
 *
 * @example Storage.popInt32(Storage.StringKey("foo"))
 */
export let popInt32 = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt32(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a 64-bit integer.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The string value which was removed from storage
 *
 * @example Storage.popInt64(Storage.StringKey("foo"))
 */
export let popInt64 = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt64(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a 128-bit integer.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The string value which was removed from storage
 *
 * @example Storage.popInt128(Storage.StringKey("foo"))
 */
export let popInt128 = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt128(0L)
  }
}

/**
 * Removes any storage entry associated with the given key,
 * returning any existing value, interpreted as a 256-bit integer.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns The string value which was removed from storage
 *
 * @example Storage.popInt256(Storage.StringKey("foo"))
 */
export let popInt256 = (key: String) => {
  let res = Native.storageRemove(keyLen(key), keyPtr(key), 0N)
  if (WasmI64.eqz(res)) {
    None
  } else {
    Register.readInt256(0L)
  }
}

/**
 * Removes any storage entry associated with the given key.
 * If this operation removes an entry, the contents of
 * register 0 will be overwritten.
 *
 * @param key: The key to remove
 * @returns Whether this operation removed data from storage
 *
 * @example Storage.remove(Storage.StringKey("foo"))
 */
export let remove = (key: String) => {
  !WasmI64.eqz(Native.storageRemove(keyLen(key), keyPtr(key), 0N))
}
