/* grainc-flags --no-gc */
import Option from "option"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Conv from "runtime/unsafe/conv"
import Native from "./internal/native"
import Register from "./register"

/**
 * Gets the account ID of the current contract that we are executing.
 * This function will overwrite the contents of register 0.
 *
 * @returns The account ID
 *
 * @example Context.currentAccountId()
 */
export let currentAccountId = () => {
  Native.currentAccountId(0N)
  Option.unwrap(Register.readString(0L))
}

/**
 * All contract calls are a result of some transaction that was signed by some account using
 * some access key and submitted into a memory pool (either through the wallet using RPC or by
 * a node itself). This function returns the ID of that account.
 * This function will overwrite the contents of register 0.
 *
 * @returns The account ID
 *
 * @example Context.signerAccountId()
 */
export let signerAccountId = () => {
  Native.signerAccountId(0N)
  Option.unwrap(Register.readString(0L))
}

/**
 * Saves the public key of the access key that was used by the signer into the register. In
 * rare situations smart contract might want to know the exact access key that was used to send
 * the original transaction, e.g. to increase the allowance or manipulate with the public key.
 * This function will overwrite the contents of register 0.
 *
 * @returns The account public key
 *
 * @example Context.signerAccountPublicKey()
 */
export let signerAccountPublicKey = () => {
  Native.signerAccountPk(0N)
  Option.unwrap(Register.readBytes(0L))
}

/**
 * All contract calls are a result of a receipt, this receipt might be created by a transaction
 * that does function invocation on the contract or another contract as a result of
 * cross-contract call.
 * This function will overwrite the contents of register 0.
 *
 * @returns The account ID
 *
 * @example Context.predecessorAccountId()
 */
export let predecessorAccountId = () => {
  Native.predecessorAccountId(0N)
  Option.unwrap(Register.readString(0L))
}

/**
 * Returns the current block height.
 *
 * @returns The current block height
 *
 * @example Context.blockHeight()
 */
export let blockHeight = () => {
  Conv.toInt64(Native.blockIndex())
}

/**
 * Returns the current block timestamp (number of
 * non-leap-nanoseconds since January 1, 1970 0:00:00 UTC).
 *
 * @returns The current block timestamp
 *
 * @example Context.blockTimestamp()
 */
export let blockTimestamp = () => {
  Conv.toInt64(Native.blockTimestamp())
}

/**
 * Returns the current epoch height.
 *
 * @returns The current epoch height
 *
 * @example Context.epochHeight()
 */
export let epochHeight = () => {
  Conv.toInt64(Native.epochHeight())
}

/**
 * Returns the number of bytes used by the contract if it was saved to the trie as of the
 * invocation. This includes:
 * - The data written with storage* functions during current and previous execution
 * - The bytes needed to store the access keys of the given account.
 * - The contract code size
 * - A small fixed overhead for account metadata.
 *
 * @returns The current storage usage
 *
 * @example Context.storageUsage()
 */
export let storageUsage = () => {
  Conv.toInt64(Native.storageUsage())
}

/**
 * Reads the input to the contract call, formatted as a byte sequence.
 * This function overwrites the contents of register 0.
 *
 * @returns The input to the contract
 *
 * @example Context.inputBytes()
 */
export let inputBytes = () => {
  Native.input(0N)
  Option.unwrap(Register.readBytes(0L))
}

/**
 * Reads the input to the contract call, formatted as a string.
 * This function is "unsafe" because it does not perform any validation
 * on the input byte sequence to ensure that it is a valid UTF-8 string.
 * This function overwrites the contents of register 0.
 *
 * @returns The input to the contract
 *
 * @example Context.inputStringUnsafe()
 */
export let inputStringUnsafe = () => {
  Native.input(0N)
  Option.unwrap(Register.readString(0L))
}
