/* grainc-flags --no-gc */

import Native from "./internal/native"
import Int128 from "./internal/int128"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"

/**
 * Get the stake of an account, if the account is currently a validator. Otherwise returns 0.
 *
 * @param accountId: The account to look up
 * @returns The stake of `accountId` (a 128-bit integer)
 *
 * @example Validator.stake(address)
 */
export let stake = (accountId: String) => {
  let ret = Int128.allocate()
  let addressPtr = WasmI64.extendI32U(
    WasmI32.add(WasmI32.fromGrain(accountId), 8n)
  )
  let addressLen = WasmI64.load32U(WasmI32.fromGrain(accountId), 4n)
  let retPtr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(ret), 8n))
  Native.validatorStake(addressLen, addressPtr, retPtr)
  ret
}

/**
 * Get the total validator stake of the current epoch.
 *
 * @returns The total validator stake (a 128-bit integer)
 *
 * @example Validator.totalStake()
 */
export let totalStake = () => {
  let ret = Int128.allocate()
  let retPtr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(ret), 8n))
  Native.validatorTotalStake(retPtr)
  ret
}
