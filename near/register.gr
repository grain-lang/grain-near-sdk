/* grainc-flags --no-gc */

import Bytes from "bytes"
import Int32 from "int32"
import Int64 from "int64"
import Option from "option"
import Native from "./internal/native"
import Int128 from "./internal/int128"
import Int256 from "./internal/int256"
import WasmI32 from "runtime/unsafe/wasmi32"
import WasmI64 from "runtime/unsafe/wasmi64"
import Conv from "runtime/unsafe/conv"
import Const from "runtime/unsafe/constants"
import {
  allocateString,
  allocateBytes,
  allocateInt32,
  allocateInt64,
} from "runtime/dataStructures"

// For the moment, the `native.gr` API is needed to do host-to-host blob passing.
// https://nomicon.io/RuntimeSpec/Components/BindingsSpec/RegistersAPI.html#host--host-blob-passing

/**
 * Reads the contents of the given register, interpreting
 * the data as a string.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readString(0L)
 */
export let readString = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    // register not in use
    None
  } else {
    let value = allocateString(WasmI32.wrapI64(valueLen))
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(WasmI32.toGrain(value): String)
  }
}

/**
 * Reads the contents of the given register, interpreting
 * the data as a byte sequence.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readBytes(0L)
 */
export let readBytes = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    None
  } else {
    let value = allocateBytes(WasmI32.wrapI64(valueLen))
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(WasmI32.toGrain(value): Bytes)
  }
}

/**
 * Reads the contents of the given register, interpreting
 * the data as a 32-bit integer.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readInt32(0L)
 */
export let readInt32 = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    None
  } else {
    assert WasmI64.eq(valueLen, 4N)
    let value = allocateInt32()
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(WasmI32.toGrain(value): Int32)
  }
}

/**
 * Reads the contents of the given register, interpreting
 * the data as a 64-bit integer.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readInt64(0L)
 */
export let readInt64 = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    None
  } else {
    assert WasmI64.eq(valueLen, 8N)
    let value = allocateInt64()
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(WasmI32.toGrain(value): Int64)
  }
}

/**
 * Reads the contents of the given register, interpreting
 * the data as a 128-bit integer.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readInt128(0L)
 */
export let readInt128 = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    None
  } else {
    assert WasmI64.eq(valueLen, 16N)
    let value = WasmI32.fromGrain(Int128.allocate())
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(Int128.fromBytes(WasmI32.toGrain(value)))
  }
}

/**
 * Reads the contents of the given register, interpreting
 * the data as a 256-bit integer.
 *
 * Will return `None` if the given register ID is not in use.
 *
 * @param id: The register to read
 * @returns The contents of the given register
 *
 * @example Register.readInt256(0L)
 */
export let readInt256 = id => {
  let idW = Conv.fromInt64(id)
  let valueLen = Native.registerLen(idW)
  if (WasmI64.eq(valueLen, Const._UMAX_I64)) {
    None
  } else {
    assert WasmI64.eq(valueLen, 32N)
    let value = WasmI32.fromGrain(Int256.allocate())
    Native.readRegister(idW, WasmI64.extendI32U(WasmI32.add(value, 8n)))
    Some(Int256.fromBytes(WasmI32.toGrain(value)))
  }
}

/**
 * Writes the given byte sequence to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeBytes(0L, Bytes.fromString("foo bar"))
 */
export let writeBytes = (id, b) => {
  let idW = Conv.fromInt64(id)
  let numBytes = WasmI64.extendI32U(
    Conv.fromInt32(Int32.fromNumber(Bytes.length(b)))
  )
  let bytesptr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(b), 8n))
  Native.writeRegister(idW, numBytes, bytesptr)
}

/**
 * Writes the given string to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeString(0L, "foo bar")
 */
export let writeString = (id, data: String) => {
  writeBytes(id, Bytes.fromString(data))
}

/**
 * Writes the given integer to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeInt32(0L, 29l)
 */
export let writeInt32 = (id, data: Int32) => {
  let idW = Conv.fromInt64(id)
  let numBytes = 4N
  let ptr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(data), 8n))
  Native.writeRegister(idW, numBytes, ptr)
}

/**
 * Writes the given integer to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeInt64(0L, 57L)
 */
export let writeInt64 = (id, data: Int64) => {
  let idW = Conv.fromInt64(id)
  let numBytes = 8N
  let ptr = WasmI64.extendI32U(WasmI32.add(WasmI32.fromGrain(data), 8n))
  Native.writeRegister(idW, numBytes, ptr)
}

/**
 * Writes the given integer to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeInt128(0L, myint)
 */
export let writeInt128 = (id, data: Int128.Int128) => {
  writeBytes(id, Int128.toBytes(data))
}

/**
 * Writes the given integer to the given register.
 *
 * @param id: The register to write to
 * @param data: The data to write to the given register
 *
 * @example Register.writeInt256(0L, myint)
 */
export let writeInt256 = (id, data: Int256.Int256) => {
  writeBytes(id, Int256.toBytes(data))
}
